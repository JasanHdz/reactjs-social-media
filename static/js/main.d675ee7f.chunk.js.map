{"version":3,"sources":["components/header.js","components/card.js","components/top-card-list.js","components/card-small.js","components/overview.js","components/switch.js","App.js","serviceWorker.js","index.js"],"names":["Header","children","className","Card","img","number","username","name","src","alt","cardListData","TopCardList","map","card","idx","key","CardSmall","title","percentage","plus","icon","overviewData","Overview","id","Switch","ref","useRef","useState","checked","setChecked","changeMedia","mq","matches","current","setAttribute","useEffect","window","matchMedia","addListener","onClick","console","log","document","body","classList","add","remove","type","htmlFor","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mXAmBeA,MAhBf,YAA+B,IAAbC,EAAY,EAAZA,SAChB,OACE,4BAAQC,UAAU,UAChB,yBAAKA,UAAU,WACb,yBAAKA,UAAU,eACb,6BACE,sDACA,uBAAGA,UAAU,gBAAb,gCAEDD,M,MCUIE,MAnBf,YAAgD,IAAhCC,EAA+B,EAA/BA,IAAKC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,SAAUC,EAAQ,EAARA,KACrC,OACE,6BAASL,UAAS,eAAUK,IAC1B,uBAAGL,UAAU,cACX,yBAAKM,IAAKJ,EAAKK,IAAI,aAClBH,GAEH,uBAAGJ,UAAU,kBACX,0BAAMA,UAAU,yBAAyBG,GACzC,0BAAMH,UAAU,wBAAhB,cAEF,uBAAGA,UAAU,cACX,yBAAKM,IAAI,qBAAqBC,IAAI,KADpC,cCVAC,G,MAAe,CACnB,CACEJ,SAAU,WACVF,IAAK,2BACLC,OAAQ,OACRE,KAAM,YAER,CACED,SAAU,WACVF,IAAK,0BACLC,OAAQ,OACRE,KAAM,WAER,CACED,SAAU,WACVF,IAAK,4BACLC,OAAQ,MACRE,KAAM,aAER,CACED,SAAU,WACVF,IAAK,0BACLC,OAAQ,OACRE,KAAM,aAwBKI,MApBf,WACE,OACE,6BAAST,UAAU,aACnB,yBAAKA,UAAU,WACb,yBAAKA,UAAU,QACVQ,EAAaE,KAAI,SAACC,EAAMC,GAAP,OAChB,kBAAC,EAAD,CACEC,IAAKD,EACLR,SAAUO,EAAKP,SACfD,OAAQQ,EAAKR,OACbD,IAAKS,EAAKT,IACVG,KAAMM,EAAKN,c,MCrBVS,MAlBf,YAAqE,IAAhDC,EAA+C,EAA/CA,MAAOZ,EAAwC,EAAxCA,OAAQa,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,KAAMb,EAAQ,EAARA,KAC1D,OACE,yBAAKL,UAAU,cACb,uBAAGA,UAAU,oBAAoBe,GACjC,uBAAGf,UAAU,mBACX,yBAAKM,IAAKY,EAAMX,IAAKF,KAEvB,uBAAGL,UAAU,qBAAqBG,GAClC,uBAAGH,UAAS,gCAA4BiB,EAAqB,GAAd,cAC7C,8BACE,yBAAKX,IAAKW,EAAO,qBAAuB,uBAAwBV,IAAI,SACnES,EAFH,QCRFG,G,MAAe,CACnB,CACEJ,MAAO,aACPZ,OAAQ,GACRa,WAAY,EACZC,MAAM,EACNC,KAAM,2BACNb,KAAM,YAER,CACEU,MAAO,QACPZ,OAAQ,GACRa,WAAY,EACZC,MAAM,EACNC,KAAM,2BACNb,KAAM,YAER,CACEU,MAAO,QACPZ,OAAQ,OACRa,WAAY,OACZC,MAAM,EACNC,KAAM,4BACNb,KAAM,aAER,CACEU,MAAO,gBACPZ,OAAQ,MACRa,WAAY,OACZC,MAAM,EACNC,KAAM,4BACNb,KAAM,aAER,CACEU,MAAO,UACPZ,OAAQ,MACRa,WAAY,MACZC,MAAM,EACNC,KAAM,0BACNb,KAAM,WAER,CACEU,MAAO,QACPZ,OAAQ,MACRa,WAAY,MACZC,MAAM,EACNC,KAAM,0BACNb,KAAM,WAER,CACEU,MAAO,QACPZ,OAAQ,MACRa,WAAY,KACZC,MAAM,EACNC,KAAM,0BACNb,KAAM,WAER,CACEU,MAAO,cACPZ,OAAQ,OACRa,WAAY,KACZC,MAAM,EACNC,KAAM,0BACNb,KAAM,aA2BKe,MAvBf,WACE,OACE,6BAASpB,UAAU,WAAWqB,GAAG,YAC/B,yBAAKrB,UAAU,WACb,iDACA,yBAAKA,UAAU,QACZmB,EAAaT,KAAI,SAACC,EAAMC,GAAP,OAChB,kBAAC,EAAD,CACEC,IAAKD,EACLG,MAAOJ,EAAKI,MACZZ,OAAQQ,EAAKR,OACba,WAAYL,EAAKK,WACjBC,KAAMN,EAAKM,KACXC,KAAMP,EAAKO,KACXb,KAAMM,EAAKN,c,aC7CViB,MArCf,WACE,IAAMC,EAAMC,iBAAO,MADH,EAEcC,oBAAS,GAFvB,mBAETC,EAFS,KAEAC,EAFA,KAgBhB,SAASC,EAAYC,GACfA,EAAGC,UACLH,GAAYD,GACZH,EAAIQ,QAAQC,aAAa,WAAW,IASxC,OALAC,qBAAU,WACGC,OAAOC,WAAW,gCAC1BC,YAAYR,GACfD,GAAYD,KACX,IAED,yBAAK1B,UAAU,aACb,uBAAGA,UAAU,mBAAb,aACA,2BAAOuB,IAAKA,EAAKc,QA5BA,WACnBC,QAAQC,IAAIhB,EAAIQ,QAAQL,SACxBC,EAAWJ,EAAIQ,QAAQL,SACnBH,EAAIQ,QAAQL,SACdc,SAASC,KAAKC,UAAUC,IAAI,gBAC5BH,SAASC,KAAKC,UAAUE,OAAO,mBAG/BJ,SAASC,KAAKC,UAAUE,OAAO,gBAC/BJ,SAASC,KAAKC,UAAUC,IAAI,mBAmBYjB,QAASA,EAAS1B,UAAU,WAAW6C,KAAK,WAAWxB,GAAG,aAClG,2BAAOrB,UAAU,SAAS8C,QAAQ,e,MCfzBC,MAZf,WACE,OACE,oCACE,kBAAC,EAAD,KACE,kBAAC,EAAD,OAEF,kBAAC,EAAD,MACA,kBAAC,EAAD,QCHcC,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFd,SAASe,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.d675ee7f.chunk.js","sourcesContent":["import React from 'react'\nimport '../header.css'\n\nfunction Header({ children }) {\n  return (\n    <header className=\"header\">\n      <div className=\"wrapper\">\n        <div className=\"header-grid\">\n          <div>\n            <h1>Social Media Dashboard</h1>\n            <p className=\"header-total\">Total de Followers: 23, 004</p>\n          </div>\n          {children}\n        </div>\n      </div>\n    </header>\n  )\n}\n\nexport default Header;","import React from 'react'\nimport '../card.css'\n\nfunction Card({ img, number, username, name }) {\n  return (\n    <article className={`card ${name}`}>\n      <p className=\"card-title\">\n        <img src={img} alt=\"facebook\" />\n        {username}\n      </p>\n      <p className=\"card_followers\">\n        <span className=\"card_followers-number\">{number}</span>\n        <span className=\"card_followers-title\">Followers</span>\n      </p>\n      <p className=\"card-today\">\n        <img src=\"images/icon-up.svg\" alt=\"\" />\n        12 Today\n      </p>\n    </article>\n  )\n}\n\nexport default Card","import React from 'react'\nimport Card from './card'\nimport '../top-card-list.css'\n\nconst cardListData = [\n  {\n    username: '@nathanf',\n    img: 'images/icon-facebook.svg',\n    number: '1987',\n    name: 'facebook'\n  },\n  {\n    username: '@nathanf',\n    img: 'images/icon-twitter.svg',\n    number: '1044',\n    name: 'twitter'\n  },\n  {\n    username: '@nathanf',\n    img: 'images/icon-instagram.svg',\n    number: '11k',\n    name: 'instagram'\n  },\n  {\n    username: '@nathanf',\n    img: 'images/icon-youtube.svg',\n    number: '8239',\n    name: 'youtube'\n  },\n]\n\nfunction TopCardList() {\n  return (\n    <section className=\"top-cards\">\n    <div className=\"wrapper\">\n      <div className=\"grid\">\n          {cardListData.map((card, idx) => (\n            <Card\n              key={idx}\n              username={card.username}\n              number={card.number}\n              img={card.img}\n              name={card.name}\n            />\n        ))}\n      </div>\n    </div>\n  </section>\n  )\n}\n\nexport default TopCardList","import React from 'react'\nimport '../card-small.css'\n\nfunction CardSmall({ title, number, percentage, plus, icon, name }) {\n  return (\n    <div className=\"card-small\">\n      <p className=\"card-small-views\">{title}</p>\n      <p className=\"card-small-icon\">\n        <img src={icon} alt={name} />\n      </p>\n      <p className=\"card-small-number\">{number}</p>\n      <p className={`card-small-percentage ${!plus ? 'is-danger' : ''}`}>\n        <span>\n          <img src={plus ? \"images/icon-up.svg\" : \"images/icon-down.svg\"} alt=\"icon\" />\n          {percentage}%\n        </span>\n      </p>\n    </div>\n  )\n}\n\nexport default CardSmall","import React from 'react'\nimport CardSmall from './card-small'\nimport '../overview.css'\n\nconst overviewData = [\n  {\n    title: 'Page Views',\n    number: 87,\n    percentage: 3,\n    plus: true,\n    icon: \"images/icon-facebook.svg\",\n    name: 'facebook'\n  },\n  {\n    title: 'Likes',\n    number: 52,\n    percentage: 2,\n    plus: false,\n    icon: \"images/icon-facebook.svg\",\n    name: 'facebook'\n  },\n  {\n    title: 'Likes',\n    number: '5462',\n    percentage: '2257',\n    plus: true,\n    icon: \"images/icon-instagram.svg\",\n    name: 'instagram'\n  },\n  {\n    title: 'Profile views',\n    number: '52k',\n    percentage: '1375',\n    plus: true,\n    icon: \"images/icon-instagram.svg\",\n    name: 'instagram'\n  },\n  {\n    title: 'Retwets',\n    number: '117',\n    percentage: '303',\n    plus: true,\n    icon: \"images/icon-twitter.svg\",\n    name: 'twitter'\n  },\n  {\n    title: 'Likes',\n    number: '507',\n    percentage: '553',\n    plus: true,\n    icon: \"images/icon-twitter.svg\",\n    name: 'twitter'\n  },\n  {\n    title: 'Likes',\n    number: '107',\n    percentage: '19',\n    plus: false,\n    icon: \"images/icon-youtube.svg\",\n    name: 'youtube'\n  },\n  {\n    title: 'Total Views',\n    number: '1407',\n    percentage: '12',\n    plus: false,\n    icon: \"images/icon-youtube.svg\",\n    name: 'youtube'\n  },\n]\n\nfunction Overview() {\n  return (\n    <section className=\"overview\" id=\"overview\">\n      <div className=\"wrapper\">\n        <h2>Overview - Today </h2>\n        <div className=\"grid\">\n          {overviewData.map((card, idx) => (\n            <CardSmall\n              key={idx}\n              title={card.title}\n              number={card.number}\n              percentage={card.percentage}\n              plus={card.plus}\n              icon={card.icon}\n              name={card.name}\n            />\n          ))}\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default Overview","import React, { useEffect, useRef, useState } from 'react'\nimport '../switch.css'\n\nfunction Switch() {\n  const ref = useRef(null)\n  const [checked, setChecked] = useState(false)\n  const handleChange = () => {\n    console.log(ref.current.checked)\n    setChecked(ref.current.checked)\n    if (ref.current.checked) {\n      document.body.classList.add('is-dark-mode')\n      document.body.classList.remove('is-light-mode')\n  \n    } else {\n      document.body.classList.remove('is-dark-mode')\n      document.body.classList.add('is-light-mode')\n    }\n  }\n\n  function changeMedia(mq) {\n    if (mq.matches) {\n      setChecked(!checked)\n      ref.current.setAttribute('checked', true)\n    }\n  }\n\n  useEffect(() => {\n    const mq = window.matchMedia('(prefers-color-scheme: dark)')\n    mq.addListener(changeMedia)\n    setChecked(!checked)\n  }, [])\n  return (\n    <div className=\"dark-mode\">\n      <p className=\"dark-mode-title\">Dark Mode</p>\n      <input ref={ref} onClick={handleChange} checked={checked} className=\"checkbox\" type=\"checkbox\" id=\"checkbox\" />\n      <label className=\"switch\" htmlFor=\"checkbox\" ></label>\n    </div>\n  )\n}\n\nexport default Switch","import React from 'react';\nimport Header from './components/header'\nimport TopCardList from './components/top-card-list';\nimport Overview from './components/overview';\nimport Switch from './components/switch'\n\nimport './globals.css';\n\nfunction App() {\n  return (\n    <>\n      <Header>\n        <Switch />\n      </Header>\n      <TopCardList />\n      <Overview />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}